# Generated by Django 4.0.5 on 2022-07-28 20:38

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, help_text='Name of the user', max_length=64, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email ID of user', max_length=254, null=True, unique=True)),
                ('mobile', models.CharField(blank=True, help_text='Mobile number of user', max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Enter valid number (max 15 digits)', regex='^[+][0-9]{10,15}$')])),
                ('verified', models.BooleanField(default=False, help_text='User verification status')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Staff', 'Staff'), ('OrgUser', 'OrgUser'), ('AccountManager', 'AccountManager')], max_length=16, null=True)),
                ('photo', models.TextField(blank=True, help_text='photo file field', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'User details',
            },
        ),
    ]
